enum PublicationState {
    draft,
    in_review,
    published
}

# Scalar datatypes
# ID, String, Int, Boolean, enum, Float

type Comment {
    id: ID!
    text: String!

    rating: Int!
}

enum ContactType { phone, email }

type Contact {
    type: ContactType!
    value: String!
}

type Publisher  {
    id: ID!
    name: String!
    contact: Contact!
}


"""
A `Story` domain object most **important** object in our application.

"""
type Story {
    id: ID!
    title: String!
    body: String!
    excerpt(maxLength: Int! = 10): String!

    "Returns the PublicationState"
    state: PublicationState!

    """ This field returns always a list of _Comment_ objects

    - It never returns null
    - The list only contains comment objects, but no null values
    - The list might be empty
    """
    comments: [Comment!]!
#    commentsWithPagination(first: Int!): CommentList!

    """
    The publisher can be null:
    (- if it is removed from the remote service)
    - if the remote call could not be executed
    """
    publisher: Publisher

#    likes: Int!
}

#type CommentList {
#    comments: [Comment!]!
#
#    pageSize: Int!
#    hasNextPage: Boolean!
#    pageNo: Int!
#}


# Root Type
#   fields: Root Fields
type Query {
    stories: [Story!]!

    "Returns a single story by id. If that story does not exist, it returns null"
    story(storyId: ID!): Story
}

input CreateCommentInput {
    storyId: ID!
    text: String!
    rating: Int!
}

input AddCommentInput {
    storyId: ID!
    text: String!
    rating: Int!
}

#type AddCommentPayload {
#    comment: Comment
#    errorMsg: String
#}

type AddCommentSuccess {
    comment: Comment!
}

type ValidationError {
    validationMessage: String!
}

type AddCommentError {
    errorMsg: String!
}

union AddCommentPayload = AddCommentSuccess | AddCommentError

type Mutation {
#    createComment(storyId: ID!, text: String!, rating: Int!): Comment!
    createComment(input: CreateCommentInput!): Comment! @deprecated(reason: "Do not use anylonger, use new addComment mutation")

    addComment(input: AddCommentInput!): AddCommentPayload!
}


